from django.core.management.base import BaseCommand
from SecureDoomDB.models import Resident
from SecureDoomDB.models import Street
from SecureDoomDB.models import House
from SecureDoomDB.models import Car
from SecureDoomDB.models import InOutRegister
from random import randint
from random import gauss
import datetime
import time
import schedule

class Command(BaseCommand):
    help = 'Simula entradas y salidas de la privada'

    def handle(self, *args, **options): 
        d = datetime.datetime.now() #get today day
        t = datetime.datetime.now().time() #get exact time
    
        def outCarTwo():
            print("isWorkingOut")
            #<-----TIME SPIKES----->
            #Morning Time Spike
            mStart = datetime.time(6, 00) 
            mEnd = datetime.time(8, 00)
            #Middle Day Time Spike
            mdStart = datetime.time(12, 00) 
            mdEnd = datetime.time(12, 30)

            r=randint(1,100)

            cars = Car.objects.filter(isIn=True)
            quantity = Car.objects.filter(isIn=True).count()
            if quantity>0:
                random = randint(1, quantity) - 1
                #Morning----------------------------------------------->
                if t >=  mStart and t <=mEnd:
                    if d.isoweekday() in range(1,5):
                        if r <= gauss(5, 2):
                            car = cars[random] 
                            car.isIn=False
                            car.save()
                            print(car.plates)
                            print("Morning")
                            InOutRegister.objects.create(car=car, kind='OUT')
                        else:
                            print("NoOut")
                    else:
                        print("NotWeekDay")
                #Middle day------------------------------------------->
                elif t >=  mdStart and t <=mdEnd:
                        if r <= gauss(3, 0.2): 
                            car = cars[random] 
                            car.isIn=False
                            print("Midde day")
                            car.save()
                            print(car.plates)
                            InOutRegister.objects.create(car=car, kind='OUT')
                        else:
                            print("NoOut")
                #Any other time in the day---------------------------->
                else:
                    if r <= gauss(2, 0.5):
                        car = cars[random] 
                        car.isIn=False
                        print("Any other time")
                        car.save()
                        print(car.plates)
                        InOutRegister.objects.create(car=car, kind='OUT')
                    else:
                        print("NoOut")
            else:
                print("All cars out")

        
        def inCarTwo():
            print("isWorkingIn")
            #<-----TIME SPIKES----->
            #Middle Day Time Spike
            mdStart = datetime.time(12, 30)
            mdEnd = datetime.time(13, 00)
            #Afternoon Time Spike
            aStart = datetime.time(17, 00)
            aEnd = datetime.time(19, 00)
            #Midnight Time Spike
            eStart = datetime.time(22, 00)
            eEnd = datetime.time(00, 00)

            r=randint(1,100)

            cars = Car.objects.filter(isIn=False)
            quantity = Car.objects.filter(isIn=False).count()
            
            if quantity > 0:
                random = randint(1, quantity) - 1
                #Middleday-------------------------->
                if t >= mdStart and t <= mdEnd:     
                    if r <= gauss(5,2): 
                        car = cars[random] 
                        car.isIn=True
                        print("Midde day")
                        car.save()
                        print(car.plates)
                        InOutRegister.objects.create(car=car, kind='IN')
                    else:
                        print("NoIn")
                #Afternoon-------------------------->
                elif t >= aStart and t <= aEnd:
                    if d.isoweekday() in range(1,5):
                        if r <= gauss(3, 0.2):
                            car = cars[random] 
                            car.isIn=True
                            print("Afternoon")
                            car.save()
                            print(car.plates)
                            InOutRegister.objects.create(car=car, kind='IN')
                        else:
                            print("NoIn")
                    else:
                        print("NotWeekDay")
                #Evening---------------------------->
                elif t >=  eStart and t <=eEnd:
                    if r <= gauss(7, 0.5):
                        car = cars[random] 
                        car.isIn=True
                        print("Evening")
                        car.save()
                        print(car.plates)
                        InOutRegister.objects.create(car=car, kind='IN')
                    else:
                        print("NoIn")
                #AnyTime---------------------------->
                else:
                    if r <= gauss(2,0.5):
                        car = cars[random] 
                        car.isIn=True
                        print("Any other time")
                        car.save()
                        print(car.plates)
                        InOutRegister.objects.create(car=car, kind='IN')
                    else:
                        print("NoIn")
            else:
                print("All cars in")    
        
        schedule.every(30).seconds.do(outCarTwo)
        schedule.every(30).seconds.do(inCarTwo)

        while True:
            print("Wait")
            schedule.run_pending()
            time.sleep(15)      